@inject MapStore MapStore

<div>
    <select bind="@selectedMap">
        <option value="">--Pick map--</option>
        @foreach (var map in MapStore.GetMaps())
        {
            <option value="@map.Id">@map.Name</option>
        }
    </select>
    <button class="btn btn-outline-success my-2 my-sm-0" onclick="@LoadMap">Load map</button>
    <button class="btn btn-outline-danger my-2 my-sm-0" onclick="@DeleteMap">Delete map</button>
</div>
<div>
    <input class="form-control mr-sm-2" type="text" placeholder="Name" bind="@newMapName"/>
    <button class="btn btn-outline-success my-2 my-sm-0" type="submit" onclick="@CreateMap">Create map</button>
</div>

@functions
{
    private string newMapName;

    private string selectedMap;

    protected override void OnInit()
    {
        MapStore.OnMapListChange += StateHasChanged;
    }
    
    private async Task LoadMap()
    {
        await MapStore.LoadMapAsync(selectedMap);
    }
    
    private async Task DeleteMap()
    {
        await MapStore.DeleteMapAsync(selectedMap);
    }
    
    private async Task CreateMap()
    {
        if (string.IsNullOrWhiteSpace(newMapName))
        {
            return;
        }
        
        var map = await MapStore.CreateMapAsync(newMapName);

        await MapStore.LoadMapAsync(map.Id);
        
        newMapName = "";
    }

}
